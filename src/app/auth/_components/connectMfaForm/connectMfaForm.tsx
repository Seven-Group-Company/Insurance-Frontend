"use client"

import {Separator} from "@/components/ui/separator";
import Image from "next/image";
import {z} from "zod";
import {useDispatch} from "react-redux";
import {useState} from "react";
import {SubmitHandler, useForm} from "react-hook-form";
import {zodResolver} from "@hookform/resolvers/zod";
import {InputOTP, InputOTPGroup, InputOTPSlot} from "@/components/ui/input-otp";
import ActionButton from "@/components/Button/ActionButton";
import useAuthenticationService from "@/services/authentication/useAuthenticationService";
import {VerifyMfaCodeDto} from "@/services/authentication/dtos/request/VerifyMfaCodeDto";
import {toast} from "sonner";
import {handleFormApiErrors} from "@/lib/handleApiErrors";
import {useSignInUser} from "@/hooks/auth/useSignInUser";

interface ConnectMfaFormProps {
    email: string;
    mfaQrCode: string
}

const schema = z.object({
    token: z.string({message: "Verification code is required"}).min(6, {message: 'Verification code is required'}),
});

type FormFields = z.infer<typeof schema>;

const ConnectMfaForm = ({email, mfaQrCode}: ConnectMfaFormProps) => {


    const dispatch = useDispatch();
    const [_value, setInternalValue] = useState("")
    const {
        handleSubmit,
        setError,
        setValue,
        formState: {errors, isSubmitting},
    }
        = useForm<FormFields>({
        resolver: zodResolver(schema),
    });


    const {signInUser} = useSignInUser()
    const {verifyMfaCode} = useAuthenticationService();

    const onSubmit: SubmitHandler<FormFields> = async (data) => {
        const dto: VerifyMfaCodeDto = {email: decodeURIComponent(email), token: data.token}

        await verifyMfaCode(dto)
            .then((response) => {
                if (response.success) {
                    signInUser(response.data!, "/", true)
                } else {
                    toast.error("Login Error", {description: "An unexpected error occurred. Please try again."});
                }
            })
            .catch((error) => {
                handleFormApiErrors<FormFields>(error,
                    setError,
                    Object.keys(schema.shape),
                    "OTP Verification Error"
                )
            })
    };
    return (
        <div
            className={"  w-[450px] "}
        >
            <div className="h-10 w-full"></div>
            <div
                className={"w-full md:p-4 md:py-6 md:drop-shadow-2xl md:rounded-md    bg-gray-white"}
            >
                <h3
                    className="text-gray-text mb-2 text-[1.5rem] font-[700]"
                >
                    Connect An Authenticator App
                </h3>

                <div
                    className={" mb-2"}
                >
                    <h3 className="text-gray-text  text-[.8rem] ">
                        Connect an authenticator app that generates verification codes.You can
                        use the codes when you need to verify your identity.
                    </h3>
                    <Separator
                        className={"my-4"}
                    />
                    <div
                        className={"w-full pl-3 mt-4"}
                    >
                        <p className="mb-1 text-[.85rem] text-gray-text">
                            1. Download and install the authenticator app on your mobile device.
                        </p>
                        <p className="mb-1 text-[.85rem] text-gray-text">
                            2. Use the app to scan this QR code.
                        </p>
                        <p className="text-[.85rem] text-gray-text">
                            3. Enter the code generated by the app.
                        </p>
                    </div>
                </div>


                <Image
                    src={mfaQrCode}
                    width={400}
                    height={400}
                    alt={"mfaQrCode"}
                    className={"mx-auto w-[200px] h-[200px]"}
                    priority
                />

                <form
                    onSubmit={handleSubmit(onSubmit)}
                    className="w-full md:px-2 flex flex-col gap-4  items-center justify-center"
                >
                    <div className="w-full flex flex-col gap-1 ">
                        <p
                            className={"text-[.8rem] text-gray-text"}
                        >Verification code *</p>
                        <InputOTP
                            maxLength={6}
                            value={_value}
                            onChange={(value) => {
                                setInternalValue(value)
                                setValue("token", value)
                            }}
                        >
                            <InputOTPGroup>
                                <InputOTPSlot index={0} invalid={!!(errors && errors.token?.message)}/>
                                <InputOTPSlot index={1} invalid={!!(errors && errors.token?.message)}/>
                                <InputOTPSlot index={2} invalid={!!(errors && errors.token?.message)}/>
                                <InputOTPSlot index={3} invalid={!!(errors && errors.token?.message)}/>
                                <InputOTPSlot index={4} invalid={!!(errors && errors.token?.message)}/>
                                <InputOTPSlot index={5} invalid={!!(errors && errors.token?.message)}/>
                            </InputOTPGroup>
                        </InputOTP>
                        {errors && (
                            <div
                                className="font-normal text-sm text-error-text">{errors.token?.message}</div>
                        )}


                    </div>

                    <ActionButton
                        className={"w-full pb-3"}
                        loading={isSubmitting}
                        type={"submit"}>
                        Sign in
                    </ActionButton>
                </form>


            </div>
            <div
                className={"h-10 w-full"}
            >

            </div>
        </div>
    )
}

export default ConnectMfaForm;
